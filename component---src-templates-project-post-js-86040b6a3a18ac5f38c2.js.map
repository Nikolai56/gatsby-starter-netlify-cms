{"version":3,"sources":["webpack:///./src/components/Seo.js","webpack:///./src/templates/project-post.js","webpack:///./src/components/Content.js","webpack:///./meta/config.js"],"names":["SE0","title","meta_title","meta_desc","cover","slug","postURL","config","siteUrl","realPrefix","pathPrefix","image","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","ProjectPostTemplate","contentComponent","description","date","helmet","authors","PostContent","Content","className","Seo","src","alt","map","key","text","pageQuery","props","post","data","markdownRemark","html","HTMLContent","frontmatter","dangerouslySetInnerHTML","__html","module","exports","siteTitle","siteLogo","siteDescription","siteRss","googleTagManagerID","disqusShortname","userName","userLocation","userDescription","copyright","themeColor","backgroundColor"],"mappings":"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","file":"component---src-templates-project-post-js-86040b6a3a18ac5f38c2.js","sourcesContent":["import React from 'react'\nimport config from '../../meta/config'\nimport Helmet from 'react-helmet'\n\nconst SE0 = ({title, meta_title, meta_desc, cover, slug}) => {\n    let postURL = config.siteUrl + slug\n    const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\n    let image = config.siteUrl + realPrefix + cover\n    const blogURL = config.siteUrl + config.pathPrefix\n    const schemaOrgJSONLD = [\n        {\n            '@context': 'http://schema.org',\n            '@type': 'WebSite',\n            url: blogURL,\n            name: title,\n            alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n        },\n    ]\n\n    schemaOrgJSONLD.push([\n        {\n            '@context': 'http://schema.org',\n            '@type': 'BreadcrumbList',\n            itemListElement: [\n                {\n                    '@type': 'ListItem',\n                    position: 1,\n                    item: {\n                        '@id': postURL,\n                        name: title,\n                        image,\n                    },\n                },\n            ],\n        },\n        {\n            '@context': 'http://schema.org',\n            '@type': 'BlogPosting',\n            url: blogURL,\n            name: title,\n            alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n            headline: title,\n            image: {\n                '@type': 'ImageObject',\n                url: image,\n            },\n            meta_desc,\n        },\n    ])\n\n    return (\n        <Helmet>\n            <title>{meta_title}</title>\n            {/* General tags */}\n            <meta name='description' content={meta_desc} />\n            <meta name='image' content={cover} />\n            {/* Schema.org tags */}\n            <script type='application/ld+json'>\n                {JSON.stringify(schemaOrgJSONLD)}\n            </script>\n            {/* OpenGraph tags */}\n            <meta property='og:url' content={postURL} />\n            <meta property='og:type' content='article' />\n            <meta property='og:title' content={title} />\n            <meta property='og:description' content={meta_desc} />\n            <meta property='og:image' content={image} />\n            <meta\n                property='fb:app_id'\n                content={config.siteFBAppID ? config.siteFBAppID : ''}\n            />\n            {/* Twitter Card tags */}\n            <meta name='twitter:card' content='summary_large_image' />\n            <meta\n                name='twitter:creator'\n                content={config.userTwitter ? config.userTwitter : ''}\n            />\n            <meta name='twitter:title' content={title} />\n            <meta name='twitter:description' content={meta_desc} />\n            <meta name='twitter:image' content={image} />\n        </Helmet>\n    )\n}\n\nexport default SE0\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layouts'\nimport Content, { HTMLContent } from '../components/Content'\nimport Seo from '../components/Seo'\n\nexport const ProjectPostTemplate = ({\n  content,\n  contentComponent,\n  description,\n  title,\n  date,\n  helmet,\n  image,\n  authors,\n}) => {\n  const PostContent = contentComponent || Content;\n    return (\n        <section className=\"project\">\n            <Seo\n                title={title}\n                // meta_title={meta_title}\n                // meta_desc={meta_desc}\n                // cover={cover}\n                // slug={slug}\n            />\n            <div className=\"container\">\n                <h1>{title}</h1>\n            </div>\n            <div className=\"grey\">\n                <div className=\"container\">\n                    <p>{description} <span className=\"tr\">{date}</span></p>\n                </div>\n            </div>\n            <div className=\"container\">\n                {image ? <img className=\"project__img\" src={image} alt={title} /> : null}\n                <PostContent content={content}/>\n            </div>\n            {authors ? <div className=\"grey\">\n                <div className=\"container dib\">\n                    {authors.map(item => (\n                        <p key={`${item.title}-${item.text}`}>\n                            <span>{item.title}</span>\n                            <br />{item.text}\n                        </p>\n                    ))}\n                </div>\n            </div> : null}\n        </section>\n    )\n};\n\nexport default props => {\n  const { markdownRemark: post } = props.data;\n\n  return (\n      <Layout>\n          <ProjectPostTemplate\n              content={post.html}\n              contentComponent={HTMLContent}\n              description={post.frontmatter.description}\n              helmet={<Helmet title={`Работы | ${post.frontmatter.title}`} />}\n              title={post.frontmatter.title}\n              date={post.frontmatter.date}\n              image={post.frontmatter.image}\n              authors={post.frontmatter.authors}\n              // cover={post.frontmatter.cover}\n              // meta_title={post.frontmatter.meta_title}\n              // meta_desc={post.frontmatter.meta_description}\n              // slug={post.fields.slug}\n          />\n      </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query ProjectPostByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"DD.MM.YYYY\")\n        title\n        description\n        image\n        authors {\n            title\n            text\n        }\n      }\n    }\n  }\n`;\n","import React from 'react'\n\nexport default ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n","module.exports = {\n    siteTitle: 'Gatsby Starter Business', // Site title.\n    siteTitleAlt: 'Business', // Alternative site title for SEO.\n    siteLogo: '/logos/logo-512x512.png', // Logo used for SEO and manifest.\n    siteUrl: 'https://gatsby-starter-business.netlify.com', // Domain of your website without pathPrefix.\n    pathPrefix: '/', // Prefixes all links. For cases when deployed to example.github.io/gatsby-starter-business/.\n    siteDescription: 'Leverage Gatsby Business Starter for your Business.', // Website description used for RSS feeds/meta description tag.\n    siteRss: '/rss.xml',\n    siteFBAppID: '', // FB Application ID for using app insights\n    googleTagManagerID: '', // GTM tracking ID.\n    disqusShortname: 'gatsby-business-starter', // Disqus shortname.\n    userName: 'Vaibhav Sharma',\n    userTwitter: 'vaibhaved',\n    userLocation: 'Delhi NCR, India',\n    userDescription: '',\n    copyright: 'Copyright © Gatsby Starter Business 2018. All Rights Reserved.', // Copyright string for the footer of the website and RSS feed.\n    themeColor: '#00d1b2', // Used for setting manifest and progress theme colors.\n    backgroundColor: '#ffffff', // Used for setting manifest background color.\n}\n"],"sourceRoot":""}